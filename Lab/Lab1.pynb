{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOw1BYt29xYwzn4fU7Jnbsv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CF36hu3Y2MCg","executionInfo":{"status":"ok","timestamp":1708202975284,"user_tz":-360,"elapsed":6974,"user":{"displayName":"ANIKA ISLAM","userId":"00934771843233001684"}},"outputId":"3467ffde-75d0-46af-a2be-d317b02ef060"},"outputs":[{"output_type":"stream","name":"stdout","text":["Enter source: Arad\n","Enter destination:Bucharest\n","Optimal Path: Arad->Sibiu->RimnicuVilcea->Pitesti->Bucharest\n","Optimal cost: 418\n"]}],"source":["f = open(\"/content/21101298_input1.txt\", \"r\")\n","check_f = f.readlines()\n","my_dic = {}\n","heauristic = {}\n","evaluation = {}\n","queue = []\n","visited = []\n","\n","for i in range(0,len(check_f)) :\n","    check_f[i] = check_f[i].strip(\"\\n\").split()\n","    my_dic[check_f[i][0]] = []\n","    heauristic[check_f[i][0]] = int(check_f[i][1])\n","    check_lis = check_f[i][2::]\n","    for j in range(len(check_lis)-1) :\n","        if check_lis[j].isalpha() and check_lis[j+1].isdigit() :\n","            my_dic[check_f[i][0]].append((check_lis[j],int(check_lis[j+1])))\n","\n","\n","def aStar(start,goal) :\n","\n","    flag = False\n","    cost = 0\n","\n","    while flag == False :\n","\n","        check = \"\"\n","        if queue != [] :\n","            leng = len(queue)\n","            num = 9999999999\n","            if leng == 1 :\n","                check = queue[0]\n","            else :\n","\n","                for i in range(0,leng) :\n","                    if (queue[i] in evaluation) :\n","                        if evaluation[queue[i]] < num :\n","                            num = evaluation[queue[i]]\n","                            check = queue[i]\n","\n","            queue.remove(check)\n","\n","            if check != goal :\n","                num1 = 999999999999999\n","                for key,value in my_dic.items() :\n","                    if key == check :\n","                        for v in range(0,len(value)):\n","                            if (v not in evaluation) :\n","                                evaluation[value[v][0]] = heauristic.get(value[v][0]) + value[v][1]\n","                                queue.append(value[v][0])\n","                visited.append(check)\n","            else :\n","                visited.append(goal)\n","                cost = 0\n","                leng = len(visited)\n","                check_cost = []\n","                for v in range(0,len(visited)-1) :\n","                    for val,co in my_dic[visited[v]] :\n","                        if (val == visited[v+1]) :\n","                            cost += co\n","                flag = True\n","\n","    return cost,visited\n","\n","source = input(\"Enter source: \")\n","destination = input(\"Enter destination: \")\n","\n","if (heauristic[destination] == 0) :\n","    queue.append(source)\n","    evaluation[source] = heauristic.get(source)\n","    op_cost,op_path= aStar(source,destination)\n","    print(\"Optimal Path:\",\"->\".join(op_path))\n","    print(\"Optimal cost:\",op_cost)"]}]}